datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id        Int     @id @default(autoincrement())
  azureADId String? @unique // Defined by Azure Active Directory.

  email           String @unique
  firstName       String
  lastName        String
  mobile          String
  addressStreet   String @db.VarChar(2000)
  addressSuburb   String
  addressState    String
  addressPostcode String

  additionalEmail String?
  dateOfBirth     DateTime?

  emergencyContactName         String?
  emergencyContactNumber       String?
  emergencyContactAddress      String?
  emergencyContactRelationship String?

  nextOfKinName         String?
  nextOfKinNumber       String?
  nextOfKinAddress      String?
  nextOfKinRelationship String?

  profilePicturePath         String?
  hasApprovedToPublishPhotos Boolean?
  endDate                    DateTime?
  volunteerAgreementSignedOn DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eoIProfile    EoIProfile?
  welcomeCall   WelcomeCall?
  references    Reference[]
  induction     Induction?
  policeCheck   PoliceCheck?
  wwcCheck      WWCCheck?
  approvalbyMRC ApprovalbyMRC?

  userAtChapter UserAtChapter[]

  importedHistory ImportedHistory?
}

model ImportedHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  error     String?  @db.Text

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model EoIProfile {
  id Int @id @default(autoincrement())

  bestTimeToContact   String  @db.Text
  occupation          String
  volunteerExperience String  @db.Text
  role                String
  mentoringLevel      String
  heardAboutUs        String
  preferredFrequency  String
  isOver18            Boolean
  comment             String  @db.Text

  aboutMe String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model WelcomeCall {
  id Int @id @default(autoincrement())

  calledBy     String
  calledOnDate DateTime
  comment      String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Reference {
  id Int @id @default(autoincrement())

  firstName    String
  lastName     String
  mobile       String
  email        String
  relationship String

  bestTimeToContact         String?
  generalComment            String? @db.Text
  outcomeComment            String? @db.Text
  skillAndKnowledgeComment  String? @db.Text
  empathyAndPatienceComment String? @db.Text
  buildRelationshipsComment String? @db.Text
  knownForComment           String? @db.Text
  safeWithChildren          String? @db.Text

  hasKnowApplicantForAYear Boolean?
  isRelated                Boolean?
  isMentorRecommended      Boolean?

  calledBy     String?
  calledOndate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Induction {
  id Int @id @default(autoincrement())

  runBy           String
  completedOnDate DateTime
  comment         String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model PoliceCheck {
  id Int @id @default(autoincrement())

  expiryDate     DateTime
  filePath       String?
  reminderSentAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model WWCCheck {
  id Int @id @default(autoincrement())

  wwcNumber      String
  expiryDate     DateTime
  filePath       String?
  reminderSentAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model ApprovalbyMRC {
  id Int @id @default(autoincrement())

  completedBy   String
  submittedDate DateTime?
  comment       String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model UserAtChapter {
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([chapterId, userId])
}

model Chapter {
  id      Int    @id @default(autoincrement())
  name    String @unique
  address String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAtChapter    UserAtChapter[]
  studentAtChapter StudentAtChapter[]
}

model Student {
  id Int @id @default(autoincrement())

  firstName                  String
  lastName                   String
  startDate                  DateTime
  dateOfBirth                DateTime
  gender                     Gender
  address                    String
  allergies                  Boolean  @default(false)
  hasApprovedToPublishPhotos Boolean  @default(false)
  bestPersonToContact        String
  bestContactMethod          String
  schoolName                 String
  yearLevel                  String

  emergencyContactFullName     String
  emergencyContactRelationship String
  emergencyContactPhone        String
  emergencyContactEmail        String
  emergencyContactAddress      String

  endDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guardian         StudentGuardian[]
  studentTeacher   StudentTeacher[]
  studentAtChapter StudentAtChapter[]

  importedStudentHistory ImportedStudentHistory?
}

model StudentGuardian {
  id Int @id @default(autoincrement())

  fullName     String
  relationship String
  phone        String
  email        String
  address      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
}

model StudentTeacher {
  id Int @id @default(autoincrement())

  fullName   String
  email      String
  schoolName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
}

model StudentAtChapter {
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId Int
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([chapterId, studentId])
}

model ImportedStudentHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  error     String?  @db.Text

  student   Student @relation(fields: [studentId], references: [id])
  studentId Int     @unique
}
