datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider     = "prisma-client"
  output       = "client"
  moduleFormat = "esm"
}

enum Gender {
  MALE
  FEMALE
}

enum SessionStatus {
  AVAILABLE
  UNAVAILABLE
}

model User {
  id        Int     @id @default(autoincrement())
  azureADId String? @unique // Defined by Azure Active Directory.

  email           String @unique
  firstName       String
  lastName        String
  fullName        String @default(dbgenerated()) // Calculated column firstName + lastName.
  mobile          String
  addressStreet   String @db.VarChar(2000)
  addressSuburb   String
  addressState    String
  addressPostcode String

  additionalEmail String?
  dateOfBirth     DateTime?
  frequencyInDays Int?

  emergencyContactName         String?
  emergencyContactNumber       String?
  emergencyContactAddress      String?
  emergencyContactRelationship String?

  nextOfKinName         String?
  nextOfKinNumber       String?
  nextOfKinAddress      String?
  nextOfKinRelationship String?

  profilePicturePath         String?
  hasApprovedToPublishPhotos Boolean?
  volunteerAgreementSignedOn DateTime?

  endDate   DateTime?
  endReason String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eoIProfile    EoIProfile?
  welcomeCall   WelcomeCall?
  references    Reference[]
  induction     Induction?
  policeCheck   PoliceCheck?
  wwcCheck      WWCCheck?
  approvalbyMRC ApprovalbyMRC?

  chapterId Int
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  mentorToStudentAssignement MentorToStudentAssignement[]
  session                    Session[]

  importedHistory ImportedHistory?

  mentorAttendance MentorAttendance[]
  goal             Goal[]
}

model ImportedHistory {
  id    Int     @id @default(autoincrement())
  error String? @db.Text

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EoIProfile {
  id Int @id @default(autoincrement())

  bestTimeToContact   String  @db.Text
  occupation          String
  volunteerExperience String  @db.Text
  role                String
  mentoringLevel      String
  heardAboutUs        String
  preferredFrequency  String
  preferredSubject    String  @default("N/A")
  isOver18            Boolean
  comment             String  @db.Text

  aboutMe String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model WelcomeCall {
  id Int @id @default(autoincrement())

  calledBy     String
  calledOnDate DateTime
  comment      String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Reference {
  id Int @id @default(autoincrement())

  firstName    String
  lastName     String
  fullName     String @default(dbgenerated()) // Calculated column firstName + lastName.
  mobile       String
  email        String
  relationship String

  bestTimeToContact         String?
  generalComment            String? @db.Text
  outcomeComment            String? @db.Text
  skillAndKnowledgeComment  String? @db.Text
  empathyAndPatienceComment String? @db.Text
  buildRelationshipsComment String? @db.Text
  knownForComment           String? @db.Text
  safeWithChildren          String? @db.Text

  hasKnowApplicantForAYear Boolean?
  isRelated                Boolean?
  isMentorRecommended      Boolean?

  calledBy     String?
  calledOndate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Induction {
  id Int @id @default(autoincrement())

  runBy           String
  completedOnDate DateTime
  comment         String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model PoliceCheck {
  id Int @id @default(autoincrement())

  expiryDate     DateTime
  filePath       String?
  reminderSentAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model WWCCheck {
  id Int @id @default(autoincrement())

  wwcNumber      String
  expiryDate     DateTime
  filePath       String?
  reminderSentAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model ApprovalbyMRC {
  id Int @id @default(autoincrement())

  completedBy   String
  submittedDate DateTime?
  comment       String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Chapter {
  id      Int    @id @default(autoincrement())
  name    String @unique
  address String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User[]
  student Student[]
  session Session[]
  goal    Goal[]

  mentorAttendance  MentorAttendance[]
  studentAttendance StudentAttendance[]
}

model Student {
  id Int @id @default(autoincrement())

  firstName String
  lastName  String
  fullName  String @default(dbgenerated()) // Calculated column firstName + lastName.

  gender                     Gender?
  startDate                  DateTime?
  dateOfBirth                DateTime?
  address                    String?
  allergies                  Boolean   @default(false)
  hasApprovedToPublishPhotos Boolean   @default(false)
  bestPersonToContact        String?
  bestContactMethod          String?
  schoolName                 String?
  yearLevel                  Int?

  emergencyContactFullName     String?
  emergencyContactRelationship String?
  emergencyContactPhone        String?
  emergencyContactEmail        String?
  emergencyContactAddress      String?

  endDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guardian       StudentGuardian[]
  studentTeacher StudentTeacher[]

  chapterId Int
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  mentorToStudentAssignement MentorToStudentAssignement[]
  studentSession             StudentSession[]
  studentAttendance          StudentAttendance[]

  studentSchoolReport StudentSchoolReport[]
  goal                Goal[]

  importedStudentHistory ImportedStudentHistory?
}

model StudentGuardian {
  id Int @id @default(autoincrement())

  fullName     String
  relationship String
  phone        String
  email        String
  address      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
}

model StudentTeacher {
  id Int @id @default(autoincrement())

  fullName   String
  email      String
  schoolName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
}

model ImportedStudentHistory {
  id    Int     @id @default(autoincrement())
  error String? @db.Text

  student   Student @relation(fields: [studentId], references: [id])
  studentId Int     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MentorToStudentAssignement {
  id Int @id @default(autoincrement())

  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int

  assignedBy String
  assignedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, studentId])
}

model SchoolTerm {
  id        Int      @id @default(autoincrement())
  year      Int
  startDate DateTime
  endDate   DateTime

  studentSchoolReport StudentSchoolReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([startDate, endDate])
  @@index([year])
}

model MentorAttendance {
  id         Int      @id @default(autoincrement())
  chapter    Chapter  @relation(fields: [chapterId], references: [id])
  chapterId  Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  attendedOn DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chapterId, userId, attendedOn])
}

model StudentAttendance {
  id         Int      @id @default(autoincrement())
  chapter    Chapter  @relation(fields: [chapterId], references: [id])
  chapterId  Int
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  Int
  attendedOn DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chapterId, studentId, attendedOn])
}

model Session {
  id Int @id @default(autoincrement())

  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId Int
  mentor    User    @relation(fields: [mentorId], references: [id])
  mentorId  Int

  attendedOn DateTime      @db.Date
  status     SessionStatus @default(AVAILABLE)

  studentSession StudentSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mentorId, chapterId, attendedOn])
}

model StudentSession {
  id Int @id @default(autoincrement())

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int

  report      String?   @db.Text
  hasReport   Boolean   @default(dbgenerated()) // Calculated column based on report != null.
  completedOn DateTime?

  reportFeedback     String?   @db.Text
  signedOffOn        DateTime?
  signedOffByAzureId String?

  writteOnBehalfByAzureId String?

  isCancelled     Boolean   @default(false)
  cancelledAt     DateTime?
  cancelledReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sessionId, studentId])
}

model StudentSchoolReport {
  id Int @id @default(autoincrement())

  filePath String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student @relation(fields: [studentId], references: [id])
  studentId Int

  schoolTerm   SchoolTerm @relation(fields: [schoolTermId], references: [id])
  schoolTermId Int
}

model Goal {
  id Int @id @default(autoincrement())

  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId Int
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  mentor    User    @relation(fields: [mentorId], references: [id])
  mentorId  Int

  title      String
  goal       String   @db.Text
  result     String?  @db.Text
  isAchieved Boolean  @default(false)
  endDate    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId, mentorId])
}
